// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolarServiceClient is the client API for SolarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolarServiceClient interface {
	// StartLocalPanel starts a Panel on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the solar/config.yaml
	//   3. all bytes constituting the Panel YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalPanel(ctx context.Context, opts ...grpc.CallOption) (SolarService_StartLocalPanelClient, error)
	// StartFromPreviousPanel starts a new Panel based on a previous one.
	// If the previous Panel does not have the can-replay condition set this call will result in an error.
	StartFromPreviousPanel(ctx context.Context, in *StartFromPreviousPanelRequest, opts ...grpc.CallOption) (*StartPanelResponse, error)
	// StartPanelRequest starts a new Panel based on its specification.
	StartPanel(ctx context.Context, in *StartPanelRequest, opts ...grpc.CallOption) (*StartPanelResponse, error)
	// Searches for Panel(s) known to this Panel
	ListPanels(ctx context.Context, in *ListPanelsRequest, opts ...grpc.CallOption) (*ListPanelsResponse, error)
	// Subscribe listens to new Panel(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SolarService_SubscribeClient, error)
	// GetPanel retrieves details of a single Panel
	GetPanel(ctx context.Context, in *GetPanelRequest, opts ...grpc.CallOption) (*GetPanelResponse, error)
	// Listen listens to Panel updates and log output of a running Panel
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (SolarService_ListenClient, error)
	// StopPanel stops a currently running Panel
	StopPanel(ctx context.Context, in *StopPanelRequest, opts ...grpc.CallOption) (*StopPanelResponse, error)
}

type solarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolarServiceClient(cc grpc.ClientConnInterface) SolarServiceClient {
	return &solarServiceClient{cc}
}

func (c *solarServiceClient) StartLocalPanel(ctx context.Context, opts ...grpc.CallOption) (SolarService_StartLocalPanelClient, error) {
	stream, err := c.cc.NewStream(ctx, &SolarService_ServiceDesc.Streams[0], "/v1.SolarService/StartLocalPanel", opts...)
	if err != nil {
		return nil, err
	}
	x := &solarServiceStartLocalPanelClient{stream}
	return x, nil
}

type SolarService_StartLocalPanelClient interface {
	Send(*StartLocalPanelRequest) error
	CloseAndRecv() (*StartPanelResponse, error)
	grpc.ClientStream
}

type solarServiceStartLocalPanelClient struct {
	grpc.ClientStream
}

func (x *solarServiceStartLocalPanelClient) Send(m *StartLocalPanelRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *solarServiceStartLocalPanelClient) CloseAndRecv() (*StartPanelResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartPanelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solarServiceClient) StartFromPreviousPanel(ctx context.Context, in *StartFromPreviousPanelRequest, opts ...grpc.CallOption) (*StartPanelResponse, error) {
	out := new(StartPanelResponse)
	err := c.cc.Invoke(ctx, "/v1.SolarService/StartFromPreviousPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solarServiceClient) StartPanel(ctx context.Context, in *StartPanelRequest, opts ...grpc.CallOption) (*StartPanelResponse, error) {
	out := new(StartPanelResponse)
	err := c.cc.Invoke(ctx, "/v1.SolarService/StartPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solarServiceClient) ListPanels(ctx context.Context, in *ListPanelsRequest, opts ...grpc.CallOption) (*ListPanelsResponse, error) {
	out := new(ListPanelsResponse)
	err := c.cc.Invoke(ctx, "/v1.SolarService/ListPanels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solarServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SolarService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SolarService_ServiceDesc.Streams[1], "/v1.SolarService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &solarServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SolarService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type solarServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *solarServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solarServiceClient) GetPanel(ctx context.Context, in *GetPanelRequest, opts ...grpc.CallOption) (*GetPanelResponse, error) {
	out := new(GetPanelResponse)
	err := c.cc.Invoke(ctx, "/v1.SolarService/GetPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solarServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (SolarService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &SolarService_ServiceDesc.Streams[2], "/v1.SolarService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &solarServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SolarService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type solarServiceListenClient struct {
	grpc.ClientStream
}

func (x *solarServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solarServiceClient) StopPanel(ctx context.Context, in *StopPanelRequest, opts ...grpc.CallOption) (*StopPanelResponse, error) {
	out := new(StopPanelResponse)
	err := c.cc.Invoke(ctx, "/v1.SolarService/StopPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolarServiceServer is the server API for SolarService service.
// All implementations must embed UnimplementedSolarServiceServer
// for forward compatibility
type SolarServiceServer interface {
	// StartLocalPanel starts a Panel on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the solar/config.yaml
	//   3. all bytes constituting the Panel YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalPanel(SolarService_StartLocalPanelServer) error
	// StartFromPreviousPanel starts a new Panel based on a previous one.
	// If the previous Panel does not have the can-replay condition set this call will result in an error.
	StartFromPreviousPanel(context.Context, *StartFromPreviousPanelRequest) (*StartPanelResponse, error)
	// StartPanelRequest starts a new Panel based on its specification.
	StartPanel(context.Context, *StartPanelRequest) (*StartPanelResponse, error)
	// Searches for Panel(s) known to this Panel
	ListPanels(context.Context, *ListPanelsRequest) (*ListPanelsResponse, error)
	// Subscribe listens to new Panel(s) updates
	Subscribe(*SubscribeRequest, SolarService_SubscribeServer) error
	// GetPanel retrieves details of a single Panel
	GetPanel(context.Context, *GetPanelRequest) (*GetPanelResponse, error)
	// Listen listens to Panel updates and log output of a running Panel
	Listen(*ListenRequest, SolarService_ListenServer) error
	// StopPanel stops a currently running Panel
	StopPanel(context.Context, *StopPanelRequest) (*StopPanelResponse, error)
	mustEmbedUnimplementedSolarServiceServer()
}

// UnimplementedSolarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSolarServiceServer struct {
}

func (UnimplementedSolarServiceServer) StartLocalPanel(SolarService_StartLocalPanelServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalPanel not implemented")
}
func (UnimplementedSolarServiceServer) StartFromPreviousPanel(context.Context, *StartFromPreviousPanelRequest) (*StartPanelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousPanel not implemented")
}
func (UnimplementedSolarServiceServer) StartPanel(context.Context, *StartPanelRequest) (*StartPanelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPanel not implemented")
}
func (UnimplementedSolarServiceServer) ListPanels(context.Context, *ListPanelsRequest) (*ListPanelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPanels not implemented")
}
func (UnimplementedSolarServiceServer) Subscribe(*SubscribeRequest, SolarService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSolarServiceServer) GetPanel(context.Context, *GetPanelRequest) (*GetPanelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPanel not implemented")
}
func (UnimplementedSolarServiceServer) Listen(*ListenRequest, SolarService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedSolarServiceServer) StopPanel(context.Context, *StopPanelRequest) (*StopPanelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPanel not implemented")
}
func (UnimplementedSolarServiceServer) mustEmbedUnimplementedSolarServiceServer() {}

// UnsafeSolarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolarServiceServer will
// result in compilation errors.
type UnsafeSolarServiceServer interface {
	mustEmbedUnimplementedSolarServiceServer()
}

func RegisterSolarServiceServer(s grpc.ServiceRegistrar, srv SolarServiceServer) {
	s.RegisterService(&SolarService_ServiceDesc, srv)
}

func _SolarService_StartLocalPanel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SolarServiceServer).StartLocalPanel(&solarServiceStartLocalPanelServer{stream})
}

type SolarService_StartLocalPanelServer interface {
	SendAndClose(*StartPanelResponse) error
	Recv() (*StartLocalPanelRequest, error)
	grpc.ServerStream
}

type solarServiceStartLocalPanelServer struct {
	grpc.ServerStream
}

func (x *solarServiceStartLocalPanelServer) SendAndClose(m *StartPanelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *solarServiceStartLocalPanelServer) Recv() (*StartLocalPanelRequest, error) {
	m := new(StartLocalPanelRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SolarService_StartFromPreviousPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousPanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolarServiceServer).StartFromPreviousPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SolarService/StartFromPreviousPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolarServiceServer).StartFromPreviousPanel(ctx, req.(*StartFromPreviousPanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolarService_StartPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolarServiceServer).StartPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SolarService/StartPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolarServiceServer).StartPanel(ctx, req.(*StartPanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolarService_ListPanels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPanelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolarServiceServer).ListPanels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SolarService/ListPanels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolarServiceServer).ListPanels(ctx, req.(*ListPanelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolarService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolarServiceServer).Subscribe(m, &solarServiceSubscribeServer{stream})
}

type SolarService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type solarServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *solarServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SolarService_GetPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolarServiceServer).GetPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SolarService/GetPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolarServiceServer).GetPanel(ctx, req.(*GetPanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolarService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolarServiceServer).Listen(m, &solarServiceListenServer{stream})
}

type SolarService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type solarServiceListenServer struct {
	grpc.ServerStream
}

func (x *solarServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SolarService_StopPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolarServiceServer).StopPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SolarService/StopPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolarServiceServer).StopPanel(ctx, req.(*StopPanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SolarService_ServiceDesc is the grpc.ServiceDesc for SolarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SolarService",
	HandlerType: (*SolarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousPanel",
			Handler:    _SolarService_StartFromPreviousPanel_Handler,
		},
		{
			MethodName: "StartPanel",
			Handler:    _SolarService_StartPanel_Handler,
		},
		{
			MethodName: "ListPanels",
			Handler:    _SolarService_ListPanels_Handler,
		},
		{
			MethodName: "GetPanel",
			Handler:    _SolarService_GetPanel_Handler,
		},
		{
			MethodName: "StopPanel",
			Handler:    _SolarService_StopPanel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalPanel",
			Handler:       _SolarService_StartLocalPanel_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SolarService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _SolarService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "solar.proto",
}
